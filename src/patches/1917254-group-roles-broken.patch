diff --git a/ldap_authorization/ldap_authorization.module b/ldap_authorization/ldap_authorization.module
index 0faa848..bab6a3f 100644
--- a/ldap_authorization/ldap_authorization.module
+++ b/ldap_authorization/ldap_authorization.module
@@ -138,20 +138,36 @@ function ldap_authorization_ldap_attributes_needed_alter(&$attribute_maps, $para
 
   if (isset($params['ldap_context'])) {
     $parts = explode('__', $params['ldap_context']);
-    if (count($parts) == 2 && $parts[0] == 'ldap_authorization') {
-      $consumer_type = $parts[1];
+
+    $add_parts = FALSE;
+    if(count($parts) == 2 && $parts[0] == 'ldap_authorization' ) {
+      $add_parts = $parts[1];
+    } elseif($parts[0] == 'ldap_user_prov_to_drupal' || $parts[0] == 'all') {
+      $add_parts = 'drupal_role';
+    }
+
+
+    if ($add_parts) {
+      $consumer_type = $add_parts;
       $consumer_conf = ldap_authorization_get_consumer_conf($consumer_type);
       if ($consumer_conf->server->groupUserMembershipsAttrExists) {
         $attribute_name = $consumer_conf->server->groupUserMembershipsAttr;
         if ($attribute_name) {
           $attribute_maps[$attribute_name] = ldap_servers_set_attribute_map($attribute_name); //array($attribute_name, 0, NULL);
         }
+
+        if (isset($consumer_conf->server->groupMembershipsAttr)) {
+          $attribute_name = $consumer_conf->server->groupMembershipsAttr;
+          if ($attribute_name) {
+            $attribute_maps[$attribute_name] = ldap_servers_set_attribute_map($attribute_name); //array($attribute_name, 0, NULL);
+          }
+        }
       }
     }
   }
-
 }
 
+
 /**
  * Implements hook_ldap_authorization_maps_alter().
  *
